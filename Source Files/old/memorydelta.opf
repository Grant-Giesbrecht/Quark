//This file specifies the computer's instructions

//This is the instruction at startup
* FETCH 0 0
0:PC0_OE FLSH_MAR0
1:PC8_OE FLSH_MAR8 FLSH_OPC0=OFF FLSH_OPC8=ON FLSH_TRIG
2:REGINS_WR FLSH_CLEAR KEY_INT_ENABLE PC_CLK

// Transfers data from the specified address in FLASH to REGISTER-A
//
// Expects FLASH MAR0 MAR8 to be populated with correct address
// to read before operation is executed.
//
//With flash trigger tied to !CLK and FLSH_CLEAR either tied to !CLK or
//with correct delay timed
//
* FLASH_REGA 2 2
0:PC0_OE FLSH_MAR0
1:PC8_OE FLSH_MAR8 FLSH_OPC0=OFF FLSH_OPC8=ON FLSH_TRIG
2:REGINS_WR FLSH_CLEAR KEY_INT_ENABLE PC_CLK
3:PC0_OE FLSH_MAR0
4:PC8_OE FLSH_MAR8 FLSH_OPC0=OFF FLSH_OPC8=ON FLSH_TRIG
5:TEMPA_WR FLSH_CLEAR PC_CLK
6:PC0_OE FLSH_MAR0
7:PC8_OE FLSH_MAR8 FLSH_OPC0=OFF FLSH_OPC8=ON FLSH_TRIG
8:TEMPB_WR FLSH_CLEAR PC_CLK
9:TEMPA_OE FLSH_MAR0
10:TEMPB_OE FLSH_MAR8 FLSH_OPC0=OFF FLSH_OPC8=ON FLSH_TRIG
11:REGA_WR FLSH_CLEAR PHSC_RST
12:
13:
14:
15:

// Transfers data from the specified address in FLASH to REGISTER-B
//
// Expects FLASH MAR0 MAR8 to be populated with correct address
// to read before operation is executed.
//
//With flash trigger tied to !CLK and FLSH_CLEAR either tied to !CLK or
//with correct delay timed
//
* FLASH_REGB 4 2
0:PC0_OE FLSH_MAR0
1:PC8_OE FLSH_MAR8 FLSH_OPC0=OFF FLSH_OPC8=ON FLSH_TRIG
2:REGINS_WR FLSH_CLEAR KEY_INT_ENABLE PC_CLK
3:PC0_OE FLSH_MAR0
4:PC8_OE FLSH_MAR8 FLSH_OPC0=OFF FLSH_OPC8=ON FLSH_TRIG
5:TEMPA_WR FLSH_CLEAR PC_CLK
6:PC0_OE FLSH_MAR0
7:PC8_OE FLSH_MAR8 FLSH_OPC0=OFF FLSH_OPC8=ON FLSH_TRIG
8:TEMPB_WR FLSH_CLEAR PC_CLK
9:TEMPA_OE FLSH_MAR0
10:TEMPB_OE FLSH_MAR8 FLSH_OPC0=OFF FLSH_OPC8=ON FLSH_TRIG
11:REGB_WR FLSH_CLEAR PHSC_RST
12:
13:
14:
15:

* ADD 6 0
0:PC0_OE FLSH_MAR0
1:PC8_OE FLSH_MAR8 FLSH_OPC0=OFF FLSH_OPC8=ON FLSH_TRIG
2:REGINS_WR FLSH_CLEAR KEY_INT_ENABLE PC_CLK
3:ADD
4:ADD REGC_WR PC_CLK PHSC_RST
5:

* HALT 8 0
0:PC0_OE FLSH_MAR0
1:PC8_OE FLSH_MAR8 FLSH_OPC0=OFF FLSH_OPC8=ON FLSH_TRIG
2:REGINS_WR FLSH_CLEAR KEY_INT_ENABLE PC_CLK
3:HALT

* REGC_RAM 10 2
0:PC0_OE FLSH_MAR0
1:PC8_OE FLSH_MAR8 FLSH_OPC0=OFF FLSH_OPC8=ON FLSH_TRIG
2:REGINS_WR FLSH_CLEAR KEY_INT_ENABLE PC_CLK
3:PC0_OE FLSH_MAR0
4:PC8_OE FLSH_MAR8 FLSH_OPC0=OFF FLSH_OPC8=ON FLSH_TRIG
5:RAM_MAR0 FLSH_CLEAR PC_CLK
6:PC0_OE FLSH_MAR0
7:PC8_OE FLSH_MAR8 FLSH_OPC0=OFF FLSH_OPC8=ON FLSH_TRIG
8:RAM_MAR8 FLSH_CLEAR PC_CLK
9:REGC_OE RAM_WR PHSC_RST
10:
11:
12:
13:
14:

* REGC_FLASH 12 2
0:PC0_OE FLSH_MAR0
1:PC8_OE FLSH_MAR8 FLSH_OPC0=OFF FLSH_OPC8=ON FLSH_TRIG
2:REGINS_WR FLSH_CLEAR KEY_INT_ENABLE PC_CLK
3:PC0_OE FLSH_MAR0
4:PC8_OE FLSH_MAR8 FLSH_OPC0=OFF FLSH_OPC8=ON FLSH_TRIG
5:TEMPA_WR FLSH_CLEAR PC_CLK
6:PC0_OE FLSH_MAR0
7:PC8_OE FLSH_MAR8 FLSH_OPC0=OFF FLSH_OPC8=ON FLSH_TRIG
8:TEMPB_WR FLSH_CLEAR PC_CLK
9:TEMPA_OE FLSH_MAR0
10:TEMPB_OE FLSH_MAR8
11:REGC_OE FLSH_OPC0=ON FLSH_OPC8=OFF FLSH_TRIG PHSC_RST
12:
13:
14:

// Load RAM-MAR with instruction-data
//
//With flash trigger tied to !CLK and FLSH_CLEAR either tied to !CLK or
//with correct delay timed
* FLSH_RAM 14 3
0:PC0_OE FLSH_MAR0
1:PC8_OE FLSH_MAR8 FLSH_OPC0=OFF FLSH_OPC8=ON FLSH_TRIG
2:REGINS_WR FLSH_CLEAR KEY_INT_ENABLE PC_CLK
3:PC0_OE FLSH_MAR0
4:PC8_OE FLSH_MAR8 FLSH_OPC0=OFF FLSH_OPC8=ON FLSH_TRIG
5:RAM_MAR0 FLSH_CLEAR PC_CLK
6:PC0_OE FLSH_MAR0
7:PC8_OE FLSH_MAR8 FLSH_OPC0=OFF FLSH_OPC8=ON FLSH_TRIG
8:RAM_MAR8 FLSH_CLEAR PC_CLK
9:PC0_OE FLSH_MAR0
10:PC8_OE FLSH_MAR8 FLSH_OPC0=OFF FLSH_OPC8=ON FLSH_TRIG
11:RAM_WR FLSH_CLEAR PC_CLK PHSC_RST
12:
13:
14:
15:

// Load RAM-MAR with instruction-data
//
//With flash trigger tied to !CLK and FLSH_CLEAR either tied to !CLK or
//with correct delay timed
* RAM_REGA 16 2
0:PC0_OE FLSH_MAR0
1:PC8_OE FLSH_MAR8 FLSH_OPC0=OFF FLSH_OPC8=ON FLSH_TRIG
2:REGINS_WR FLSH_CLEAR KEY_INT_ENABLE PC_CLK
3:PC0_OE FLSH_MAR0
4:PC8_OE FLSH_MAR8 FLSH_OPC0=OFF FLSH_OPC8=ON FLSH_TRIG
5:RAM_MAR0 FLSH_CLEAR PC_CLK
6:PC0_OE FLSH_MAR0
7:PC8_OE FLSH_MAR8 FLSH_OPC0=OFF FLSH_OPC8=ON FLSH_TRIG
8:RAM_MAR8 FLSH_CLEAR PC_CLK
9:RAM_OE REGA_WR PHSC_RST
10:
11:
12:
13:
14:
15:

* FCPA_CACHE 48 0
0: PC_OE PMEM_MAR
1: FLSH_OPC0=OFF FLSH_OPC1=ON FLSH0_TRIG
2: REGINS_WR FLSH0_OE PC_CLK
3: FCPC0_OE CCA_WR
4: FCPC1_OE CCB_WR
5: FCPC2_OE CCC_WR
6: FCPC3_OE CC3_WR PHSC_RST

* CACHE32_RAM 49 2
0: PC_OE PMEM_MAR
1: FLSH_OPC0=OFF FLSH_OPC1=ON FLSH0_TRIG
2: REGINS_WR FLSH0_OE PC_CLK
3: PC_OE JRTN_WR PC_CLK //SAVE PROGRAM LINE
4: PC_OE PMEM_OE AA0_WR PC_CLK //GET 1ST BYTE OF RAM ADDR
5: PC_OE PMEM_OE AA8_WR PC_CLK // GET 2ND BYTE OF RAM ADDR
6: AA_OE PC_WR //MOVE RAM ADDR TO COUNTER
7: PC_OE CCA_OE RAM_WR PC_CLK
8: PC_OE CCB_OE RAM_WR PC_CLK
9: PC_OE CCC_OE RAM_WR PC_CLK
10: PC_OE CCD_OE RAM_WR PC_CLK //DATA HAS BEEN MOVED
11: JRTN_OE PC_WR PHSC_RST
