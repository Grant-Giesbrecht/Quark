#!/usr/local/bin/python3

# from IPython import get_ipython
#
# try:
#     __IPYTHON__
# except NameError:
# 	print("Not in IPython")
# else:
# 	get_ipython().run_line_magic("reset", "-f")
# 	print("In IPython")

import pyvisa as pv
import time
import sys, getopt
from colorama import Fore, Style

filename = "downlink.mcb"
readlength = 30 # If changed, update default in help print statements
show_addresses = False
comp_file = ""
compare = False
argv = sys.argv[1:]
save_outfile = False

try:
	opts, args = getopt.getopt(argv,"hc:o:la:s", [])
except getopt.GetoptError:
	print("blinkdown -o <filename>		(Use -h for help)")
	sys.exit(2)
for opt, arg in opts:
	if opt == '-h':
		print("Blinkenrechner Project Flash Downloader")
		print("")
		print("Usage:")
		print("  blinkdown ... -o <out_file>")
		print("  blinkdown ... -l <read length>")
		print("  blinkdown ... -h")
		print("  blinkdown ... -c <compare_file>")
		print("  blinkdown ... -a")
		print("")
		print("Description")
		print("  -o  Specify output file (Default: downlink.mcb)")
		print("  -l  Specify read length. Cannot be used with -c flag. (Default: 30)")
		print("  -h  Show help")
		print("  -c  Specify comparison MCB file. Will read lines found in this file")
		print("      and check if flash memory agrees. Cannot be used with -l flag.")
		print("  -a  Show addresses")
		print("  -s  Save downlink to file. (Automatically set with -o)")
		sys.exit()
	if opt == '-c':
		compare = True
		comp_file = arg
	elif opt in ("-o"):
		filename = arg
		save_outfile = True
	elif opt in ("-s"):
		save_outfile = True
	elif opt in ("-l"):
		try:
			readlength = int(arg)
		except:
			print(f"Invalid argument for read length")
	elif opt == "-a":
		show_addresses = True

# print 'Input file is "', inputfile
# print 'Output file is "', outputfile

# filename = "../Blinkenmatrix/opfiles/memorydelta_downlink.bcm"
# readlength = 1001;
# readlength = 4359;
# readlength = 30;

lines_per_batch = 512

t_upload = []
t_write = []

recd_addrs = []
recd_data = []

read_finished = False;

port = "FIRST"; # Options: BACK_LEFT, FRONT_LEFT, BACK_RIGHT, FRONT_RIGHT, FIRST

#Open connection to Arduino
rm = pv.ResourceManager()
addr = "INVALID"
try:
	addr_list = rm.list_resources()
	if show_addresses:
		print("Detected Addresses:")
		for ad in addr_list:
			print(f"\t{ad}")
		print("")
	if port == "FIRST":
		for ad in addr_list:
			if not ("BLTH"  in ad or "tooth" in ad):
				addr = ad
		# addr = rm.list_resources()[1]
	else:
		for ad in addr_list:
			if port == "BACK_LEFT":
				if '14401' in ad:
					addr = ad
			elif port == "FRONT_LEFT":
				if '14301' in ad:
					addr = ad
			elif port == "FRONT_RIGHT":
				if '14201' in ad:
					addr = ad
			elif port == "BACK_RIGHT":
				if '14101' in ad:
					addr = ad

	if addr == "INVALID":
		print(f"Failed to find requested address at location '{port}'")
		exit()

	dev = rm.open_resource(addr, baud_rate = 115200)
	# dev = rm.open_resource(addr)
	# dev.baud_rate = 115200
except Exception as e:
	print(f"Failed to open device at address '{addr}'")
	print(str(e))
	exit()

# Update number of lines to read if comparing to a file
last_line = 0;
comp_data = dict()
if compare:

	with open(comp_file, 'r') as f:

		#For each line
		for line in f:

			# Search for address:data marker
			idx = line.find(":")
			if idx != -1:
				try:
					comp_addr = int(line[0:idx]) # Get address
					last_line = max(last_line, comp_addr) # Update max address
					comp_data[comp_addr] =  int(line[idx+1:])# Save to dict
				except:
					print(f"Failed to interpret line {line} in comparison file.")
	if last_line > 0:
		print(f"Changing read length to match comparison file ({last_line} lines).")
		readlength = last_line+1 # Plus One because 0 based indexing
	else:
		print("Failed to get valid address from comparison file.")




def main():


	# dev.timeout = 25e3 #Timeout in ms

	#Print messages
	print(f"Aquired device resource.\n\tAddress: \"{addr}\"")
	print("Waiting to connect", end="", flush=True)

	#Send messages to device and wait until it responds...
	connected = False
	for i in range(10):

		dev.timeout = 1e3
		dev.write("R")
		try:
			dev.read()
		except pv.errors.VisaIOError:
			print('.', end="", flush=True)
		else:
			connected = True
			print("Connection verified - continuing\n")
			break;
	if not connected:
		print("\nFailed to verify connection. Exiting.")
		exit()

	#Read messages from the device just to make sure the buffer is clear
	print("Clearing buffer", end="", flush=True)
	num_reads = 0;
	while (True):
		try:
			dev.read()
		except pv.errors.VisaIOError:
			break;
		else:
			num_reads += 1;
	if num_reads == 0:
		print(" \t\tNothing to clear. Continuing")
	else:
		print(f" \t\tCleared {num_reads} messages")

	#Set timeout to be longer
	dev.timeout = 10e3 #ms

	print(f"\nDownloading data to file: {filename}")

	# Send packet length - request read operation
	print(f"\nRequesting read of length: {readlength}", end='', flush=True)
	dev.write(f"L={readlength}*")
	recd = dev.read().strip("\n").strip('\r')
	#
	#This double checks that there aren't some stray special chars in string
	orig_len = len(recd)
	recd = recd.replace('\n', '')
	recd = recd.replace('\r', '')
	had_bad = False
	if (orig_len != len(recd)):
		had_bad = True
	#
	if recd[0] == "G":
		if (had_bad):
			print("!", end='')
		print("\tAcknowledged by Arduino")
		print(f"\t\tBeginning read of length: {recd[1:]}")
	else:
		if (had_bad):
			print("!", end='')
		print(f"? \t'{recd}'")
		exit();

	print("Beginning read")

	while (True):

		listen_to_chipread()

		if not get_downlink():
			break;



	print("\n\nRead complete")

	if save_outfile:
		print(f"\nSaving file {filename}")
		save_to_file(filename)

	# Compare received data to comparison file if specified
	if compare:

		num_miss = 0
		num_hit = 0
		report_str = ""

		# Loop through all received data
		for idx, a in enumerate(recd_addrs):

			# See if address is in comp-file
			if a in comp_data:
				d = recd_data[idx]
				dc = comp_data[a]
				if dc == d:
					num_hit += 1
				else:
					report_str = report_str + f"\t\tAddr: {a}, Downlink: {d}, File: {dc}\n"
					num_miss += 1
				del comp_data[a] #Matched - remove element

		print("")
		print("Comparison Result:")
		comparison_passed = True
		if len(comp_data.keys()) != 0:
			print(f"\t{Fore.RED}Downlink missing data found in comparison file.{Style.RESET_ALL}")
			keys_str = ""
			count = 0
			for k in comp_data:
				if len(keys_str) > 0:
					keys_str = keys_str + ", "
				keys_str = keys_str + str(k)
				count += 1
				if count >= 10:
					keys_str = keys_str + f", ... ({len(keys_str)-10} address truncated)"
					break
			print(f"\t\t{Fore.RED}Missing addresses: {keys_str}{Style.RESET_ALL}")
			comparison_passed = False
		if num_miss > 0:

			pcnt_str = "{:.1f}".format(num_miss/(num_hit+num_miss)*100)
			print(f"\t{Fore.RED}Data Mismatches: {num_miss} ({pcnt_str} %)" )
			print(report_str)
			print(f"{Style.RESET_ALL}")
			comparison_passed = False
		else:
			print(f"\t{Fore.BLUE}No data mismatches{Style.RESET_ALL}")
		if comparison_passed:
			print(f"{Fore.BLUE}Comparison passed{Style.RESET_ALL}")
		else:
			print(f"{Fore.RED}Comparison failed{Style.RESET_ALL}")




def listen_to_chipread():
	print("Arduino is reading chip.")
	print('\n|           | (* = 50 Bytes written)\r|', end='', flush=True);
	while(True):

		recd = dev.read().strip('\n').strip('\r')
		if recd == "Ready":
			print("\nWrite complete. Sending next batch of data\n")
			return;
		elif recd == "U":
			print("*", end='', flush=True)
		else:
			print(f"?({recd})", end='', flush=True)
	print("Chip read phase complete")

def get_downlink():

	quit_after = False;

	print("Downlink in process")
	while (True):

		recd = dev.read().strip("\n").strip('\r')

		if recd == "E":
			break;

		if recd == "D":
			quit_after = True;
			break;

		if process_data(recd):
			dev.write("G")
		else:
			dev.write("B")
	print("Downlink complete")

	return not quit_after


def process_data(x:str):

	print(x)

	try:
		addr, data = x.split(":")
		addr = int(addr)
		data = int(data)
	except Exception as e:
		print(f"Packet failed! ({x})")
		# print(str(e))
		return False;

	recd_addrs.append(addr)
	recd_data.append(data)


def save_to_file(save_filename:str):

	if (len(recd_data) != len(recd_addrs)):
		print("Wrong address length")
		return

	with open(save_filename, 'w') as of:
		for idx, a in enumerate(recd_addrs):
			d = recd_data[idx]
			of.write(f'{a}:{d}\n')

if __name__ == '__main__':
	main()
