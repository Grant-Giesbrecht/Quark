#ARCH Matterhorn821
#SERIES PT

// Fetches the instruction. Should appear as the first two phases of every
// instruction.
#DEF FETCH_
0: _PC_OE DT2S0_ADDR_WR SR0_MAR_WR DT2S0_CPU_WR_EN
1: DT2SN_OPCD0=OFF DT2SN_OPCD1=ON _PMEM_TRIG
2: CU_PMEM_OE INST_REG_WR PC_CLK
3:
#END


// Fetches two byes of data behind the instruction and places them in the
// address assembly registers (ie. AA0 and AA8). Used for accessing an address
// stored with the instruction.
// #DEF GET_16b_ADDR_
// 3: _PC_OE DT2S0_ADDR_WR SR0_MAR_WR DT2SN_OPCD0=OFF DT2SN_OPCD1=ON _PMEM_TRIG
// 4: CU_PMEM_OE REG_AA0_WR PC_CLK
// 5: _PC_OE DT2S0_ADDR_WR SR0_MAR_WR DT2SN_OPCD0=OFF DT2SN_OPCD1=ON _PMEM_TRIG
// 6: CU_PMEM_OE REG_AA8_WR PC_CLK
// #END

// Fetches one byte of data behind the instruction and is intended to place it in
// a register. To place it in a register, the register's write control line must
// be passed as the sole argument.
// #DEF GET_8b_DATA_ (1)
// 3: _PC_OE DT2S0_ADDR_WR SR0_MAR_WR DT2SN_OPCD0=OFF DT2SN_OPCD1=ON _PMEM_TRIG
// 4: CU_PMEM_OE PC_CLK @
// #END

// Variation of `GET_8b_DATA_` that also resets the PHI counter, and thus can
// appear as the last instruction
#DEF GET_8b_DATA_end_ (1)
4: _PC_OE DT2S0_ADDR_WR SR0_MAR_WR
5: DT2SN_OPCD0=OFF DT2SN_OPCD1=ON _PMEM_TRIG
6: CU_PMEM_OE PC_CLK PHI_RESET @
#END
// #DEF GET_8b_DATA_end_ (1)
// 2: _PC_OE DT2S0_ADDR_WR SR0_MAR_WR DT2SN_OPCD0=OFF DT2SN_OPCD1=ON _PMEM_TRIG
// 3: CU_PMEM_OE PC_CLK PHI_RESET @
// #END

* VOID 0 0
? Will be run as the first instruction, no matter what! Instruction register starts at 0
#REPL FETCH_
4: ERR_SET_BADINSTRUC //This line should never run. Can replace this instruction with something helpful.

* ADD 1 0
? Adds the numbers in REGA and REGB and stores the result in REGC
#PROCESSOR ALU
#REPL FETCH_
4: _ADD_EN REGC_WR PHI_RESET

* PMEM_REGA 2 1
? Transfers one byte of data that is stored with the instruction to REGA
#REPL FETCH_
#REPL GET_8b_DATA_end_ REGA_WR

//TODO: This instruction number is wrong!
* PMEM_REGB 3 1
? Transfers one byte of data that is stored with the instruction to REGB
#REPL FETCH_
#REPL GET_8b_DATA_end_ REGB_WR

//TODO: Add HCF
* HCF 4 0
? HALT, CATCH FIRE!
#REPL FETCH_
4: _HCF_SET=ON
