#ARCH Matterhorn821
#SERIES Proto

// Changes:
// * ISR_RTN: Fixed typo in line numbering. Shouldn't change behavior.
// * CHCD_TSTOP: Fixed critical bug; forgot PHI_RESET at last line!

// Fetches the instruction. Should appear as the first four phases of every
// instruction.
#DEF FETCH_
0: _PC_OE DT2S0_ADDR_WR SR0_MAR_WR DT2S0_CPU_WR_EN REG_IRTN_WR
1: DT2SN_OPCD0=OFF DT2SN_OPCD1=ON _PMEM_TRIG IS_FETCH
2: CU_PMEM_OE INST_REG_WR IS_FETCH
3: PC_CLK
#END

// Protected fetch of the next instruction. Same as fetch, except does not update IRTN (Interrupt Return Register).
// instruction.
#DEF FETCH_PROT_
0: _PC_OE DT2S0_ADDR_WR SR0_MAR_WR DT2S0_CPU_WR_EN
1: DT2SN_OPCD0=OFF DT2SN_OPCD1=ON _PMEM_TRIG IS_FETCH
2: CU_PMEM_OE INST_REG_WR IS_FETCH
3: PC_CLK
#END

// Variation of `GET_8b_DATA_` that also resets the PHI counter, and thus can
// appear as the last instruction
#DEF GET_8b_DATA_end_ (1)
4: _PC_OE DT2S0_ADDR_WR SR0_MAR_WR
5: DT2SN_OPCD0=OFF DT2SN_OPCD1=ON _PMEM_TRIG
6: CU_PMEM_OE PC_CLK PHI_RESET @
#END

#DEF GET_8b_DATA_ (1)
4: _PC_OE DT2S0_ADDR_WR SR0_MAR_WR
5: DT2SN_OPCD0=OFF DT2SN_OPCD1=ON _PMEM_TRIG
6: CU_PMEM_OE PC_CLK @
#END

// Transfers a 16 bit address from program memory to the AA register
#DEF GET_16b_ADDR_
4: _PC_OE DT2S0_ADDR_WR SR0_MAR_WR
5: DT2SN_OPCD0=OFF DT2SN_OPCD1=ON _PMEM_TRIG
6: CU_PMEM_OE PC_CLK REG_AA0_WR
7: _PC_OE DT2S0_ADDR_WR SR0_MAR_WR
8: DT2SN_OPCD0=OFF DT2SN_OPCD1=ON _PMEM_TRIG
9: CU_PMEM_OE PC_CLK REG_AA8_WR
#END

// Variation of `GET_16b_ADDR_` that also resets the PHI counter, and thus can
// appear as the last instruction
#DEF GET_16b_ADDR_end_
4: _PC_OE DT2S0_ADDR_WR SR0_MAR_WR
5: DT2SN_OPCD0=OFF DT2SN_OPCD1=ON _PMEM_TRIG
6: CU_PMEM_OE PC_CLK REG_AA0_WR
7: _PC_OE DT2S0_ADDR_WR SR0_MAR_WR
8: DT2SN_OPCD0=OFF DT2SN_OPCD1=ON _PMEM_TRIG
9: CU_PMEM_OE PC_CLK REG_AA8_WR PHI_RESET
#END



* VOID 0 0
? Will be run as the first instruction, no matter what! Instruction register starts at 0
#REPL FETCH_
4: ERR_SET_BADINSTRUC //This line should never run. Can replace this instruction with something helpful.

* VAL_REGA 1 1
? Transfers one byte of data that is stored with the instruction to REGA
#REPL FETCH_PROT_
#REPL GET_8b_DATA_end_ REGA_WR

* ADD 2 0
? Adds the numbers in REGA and REGB and stores the result in REGC
#PROCESSOR ALU
#REPL FETCH_PROT_
4: _ADD_EN REGC_WR PHI_RESET

//TODO: This instruction number is wrong! Is it still?
* VAL_REGB 3 1
? Transfers one byte of data that is stored with the instruction to REGB
#REPL FETCH_PROT_
#REPL GET_8b_DATA_end_ REGB_WR

//TODO: Add HCF
* HCF 4 0
? HALT, CATCH FIRE!
#REPL FETCH_
4: _HCF_SET=ON

* REGC_RAM0 5 2
? Transfers contents of REGC to RAM at 16 bit address specified in argument
#REPL FETCH_
#REPL GET_16b_ADDR_
10: _REG_AA_OE SR0_MAR_WR
11: _REGC_OE  RAMS0_WR PHI_RESET

* RAM0_REGA 6 2
? Transfers data at RAM w/ specified 16 bit address to register A
#REPL FETCH_PROT_
#REPL GET_16b_ADDR_
10: _REG_AA_OE SR0_MAR_WR
11: _RAMS0_OE REGA_WR PHI_RESET

* REGC_CHA 7 0
? Transfers contents of register A to cache byte A
#REPL FETCH_
4: _REGC_OE CACHE_A_WR PHI_RESET

* SYSREG_REGA 8 0
? Transfers contents of the system hardware register to register A
#REPL FETCH_PROT_
4: _SYSREG_OE REGA_WR PHI_RESET

* REGC_SYSREG 9 0
? Writes register C to the system hardware register
#REPL FETCH_
4: _REGC_OE SYSREG_WR PHI_RESET

* BITAND 10 0
? Bitwise AND
#PROCESSOR ALU
#REPL FETCH_PROT_
4: _BITAND_EN REGC_WR PHI_RESET

* RAM0_CHA 11 2
? Transfers data at RAM w/ specified 16 bit address to cache A
#REPL FETCH_
#REPL GET_16b_ADDR_
10: _REG_AA_OE SR0_MAR_WR
11: _RAMS0_OE CACHE_A_WR PHI_RESET

* BITOR 12 0
? Bitwise OR
#PROCESSOR ALU
#REPL FETCH_PROT_
4: _BITOR_EN REGC_WR PHI_RESET

* CHA_REGA 13 0
? Moves contents of cache A to register A
#REPL FETCH_PROT_
4: _CACHE_A_OE REGA_WR PHI_RESET

* BITXOR 14 0
? Bitwise XOR
#PROCESSOR ALU
#REPL FETCH_PROT_
4: _BITXOR_EN REGC_WR PHI_RESET

* REGC_REGB 15 0
? Move REGC to REGB
#REPL FETCH_PROT_
4: _REGC_OE REGB_WR PHI_RESET

* LBS 16 0
? Local bike shop, er wait no Left bit shift
#PROCESSOR ALU
#REPL FETCH_PROT_
4: _LSHIFT_EN REGC_WR PHI_RESET

* JUMP 17 2
? Jump to a specific line
#REPL FETCH_
#REPL GET_16b_ADDR_
10: _REG_AA_OE _WRITE_PC
11: _REG_AA_OE _WRITE_PC PC_CLK PHI_RESET

* RBS 18 0
? Right bit shift
#PROCESSOR ALU
#REPL FETCH_PROT_
4: _RSHIFT_EN REGC_WR PHI_RESET

* RAM0_REGB 19 2
? Transfers data at RAM w/ specified 16 bit address to register B
#REPL FETCH_PROT_
#REPL GET_16b_ADDR_
10: _REG_AA_OE SR0_MAR_WR
11: _RAMS0_OE REGB_WR PHI_RESET

* SUB 20 0
? Subtract
#PROCESSOR ALU
#REPL FETCH_PROT_
4: INV_B CARRY_IN _ADD_EN REGC_WR PHI_RESET

* VAL_CHC 22 1
? Transfers one byte of data that is stored with the instruction to CACHE C
#REPL FETCH_
#REPL GET_8b_DATA_end_ CACHE_C_WR

* VAL_CHD 23 1
? Transfers one byte of data that is stored with the instruction to CACHE D
#REPL FETCH_
#REPL GET_8b_DATA_end_ CACHE_D_WR

* CHCD_TSTOP 24 0
? Transfers the data in CACHE C and CACHE D to the 16-bit TSTOP register. CACHE C will be transfered to bits 0-7, CACHE D to bits 8-15.
#REPL FETCH_
4: _CACHE_C_OE TSTOP0_WR
5: _CACHE_D_OE TSTOP8_WR PC_CLK PHI_RESET

* ISR_RTN 25 0
? Returns from an interrupt service routine to standard program execution
#REPL FETCH_
4: FLAG_IN_ISR_CLR
5: _REG_IRTN_OE _WRITE_PC
6: _REG_IRTN_OE _WRITE_PC PC_CLK PHI_RESET

* VAL_CHA 26 1
? Transfers one byte of data that is stored with the instruction to CACHE A
#REPL FETCH_
#REPL GET_8b_DATA_end_ CACHE_A_WR

* VAL_CHB 27 1
? Transfers one byte of data that is stored with the instruction to CACHE B
#REPL FETCH_
#REPL GET_8b_DATA_end_ CACHE_B_WR

* CHB_REGB 28 0
? Moves contents of cache B to register B
#REPL FETCH_PROT_
4: _CACHE_B_OE REGB_WR PHI_RESET

* VAL_AA 29 2
? Moves two bytes of data that is stored with the instruction to address assembly register
#REPL FETCH_
#REPL GET_16b_ADDR_end_

* AA_TISR 30 0
? Transfers the address in address assembly to the TIMER_ISR_REGISTER
#REPL FETCH_
4: _REG_AA_OE REG_TIMER_ISR_WR PHI_RESET


// Technically the program macro isn't required here because this instruction
// should never appear in code. Rigorously, however, both interrupt instructions
// would be number 53 (0x35) rather than allowing one to be assigned 117 (0x75).
// Instruction 53 should never appear in the program, however it does appear as
// 53 on the bus (after being injected by the interrupt injector)
* RUN_TIMER_ISR_AUTOMATED 117 0
? Instruction injected to run a timer interrupt service routine
#PRGM 117
#REPL FETCH_
4: _REG_TIMER_ISR_OE _WRITE_PC
5: _REG_TIMER_ISR_OE _WRITE_PC PC_CLK
6: FLAG_TIMER_INT_CLR FLAG_IN_ISR_SET PHI_RESET
